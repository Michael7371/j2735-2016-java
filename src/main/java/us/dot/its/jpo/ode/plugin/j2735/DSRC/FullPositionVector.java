package us.dot.its.jpo.ode.plugin.j2735.DSRC;

import us.dot.its.jpo.ode.plugin.types.Asn1Sequence;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.Setter;
import us.dot.its.jpo.ode.plugin.annotations.Asn1Property;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * 
 *******************************************************************************
 *
 * This source file was generated by a tool. Beware manual edits might be
 * overwritten in future releases. asn1jvm v1.0-SNAPSHOT
 *
 *******************************************************************************
 * Copyright 2024 USDOT
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************
 * 
 */
@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@Getter
@Setter
public class FullPositionVector extends Asn1Sequence {

	@Asn1Property(tag = 0, optional = true)
	private DDateTime utcTime;
	@Asn1Property(tag = 1, name = "long")
	@JsonProperty("long")
	@JsonDeserialize(using = Longitude.LongitudeDeserializer.class)
	private Longitude long_;
	@Asn1Property(tag = 2)
	@JsonDeserialize(using = Latitude.LatitudeDeserializer.class)
	private Latitude lat;
	@Asn1Property(tag = 3, optional = true)
	@JsonDeserialize(using = Elevation.ElevationDeserializer.class)
	private Elevation elevation;
	@Asn1Property(tag = 4, optional = true)
	@JsonDeserialize(using = Heading.HeadingDeserializer.class)
	private Heading heading;
	@Asn1Property(tag = 5, optional = true)
	private TransmissionAndSpeed speed;
	@Asn1Property(tag = 6, optional = true)
	private PositionalAccuracy posAccuracy;
	@Asn1Property(tag = 7, optional = true)
	private TimeConfidence timeConfidence;
	@Asn1Property(tag = 8, optional = true)
	private PositionConfidenceSet posConfidence;
	@Asn1Property(tag = 9, optional = true)
	private SpeedandHeadingandThrottleConfidence speedConfidence;

	FullPositionVector() {
		super(true);
	}
}