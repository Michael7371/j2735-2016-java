package j2735.DSRC;

import asn2pojo.runtime.annotations.Asn1Property;
import asn2pojo.runtime.types.Asn1Sequence;
import asn2pojo.runtime.types.Asn1SequenceOf;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import j2735.REGION.Reg_MapData;

/**
 * 
 * <p>
 * This source code was generated by a tool. Manual edits are futile.
 * </p>
 * <p>
 * asn1jvm v1.0-SNAPSHOT
 * </p>
 * <p>
 * ASN.1 source files:
 * </p>
 * 
 * <pre>
 * J2735_201603DA.ASN
 * </pre>
 * 
 */
@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class MapData extends Asn1Sequence {

	@Asn1Property(tag = 0, optional = true)
	private MinuteOfTheYear timeStamp;
	@Asn1Property(tag = 1)
	private MsgCount msgIssueRevision;
	@Asn1Property(tag = 2, optional = true)
	private LayerType layerType;
	@Asn1Property(tag = 3, optional = true)
	private LayerID layerID;
	@Asn1Property(tag = 4, optional = true)
	@JacksonXmlElementWrapper(localName = "intersections")
	@JacksonXmlProperty(localName = "IntersectionGeometry")
	private IntersectionGeometryList intersections;
	@Asn1Property(tag = 5, optional = true)
	@JacksonXmlElementWrapper(localName = "roadSegments")
	@JacksonXmlProperty(localName = "RoadSegment")
	private RoadSegmentList roadSegments;
	@Asn1Property(tag = 6, optional = true)
	private DataParameters dataParameters;
	@Asn1Property(tag = 7, optional = true)
	@JacksonXmlElementWrapper(localName = "restrictionList")
	@JacksonXmlProperty(localName = "RestrictionClassAssignment")
	private RestrictionClassList restrictionList;
	@Asn1Property(tag = 8, optional = true)
	private SequenceOfRegional regional;

	public MinuteOfTheYear getTimeStamp() {
		return timeStamp;
	}

	public void setTimeStamp(MinuteOfTheYear timeStamp) {
		this.timeStamp = timeStamp;
	}

	public MsgCount getMsgIssueRevision() {
		return msgIssueRevision;
	}

	public void setMsgIssueRevision(MsgCount msgIssueRevision) {
		this.msgIssueRevision = msgIssueRevision;
	}

	public LayerType getLayerType() {
		return layerType;
	}

	public void setLayerType(LayerType layerType) {
		this.layerType = layerType;
	}

	public LayerID getLayerID() {
		return layerID;
	}

	public void setLayerID(LayerID layerID) {
		this.layerID = layerID;
	}

	public IntersectionGeometryList getIntersections() {
		return intersections;
	}

	public void setIntersections(IntersectionGeometryList intersections) {
		this.intersections = intersections;
	}

	public RoadSegmentList getRoadSegments() {
		return roadSegments;
	}

	public void setRoadSegments(RoadSegmentList roadSegments) {
		this.roadSegments = roadSegments;
	}

	public DataParameters getDataParameters() {
		return dataParameters;
	}

	public void setDataParameters(DataParameters dataParameters) {
		this.dataParameters = dataParameters;
	}

	public RestrictionClassList getRestrictionList() {
		return restrictionList;
	}

	public void setRestrictionList(RestrictionClassList restrictionList) {
		this.restrictionList = restrictionList;
	}

	@JsonInclude(Include.NON_NULL)
	public static class SequenceOfRegional extends Asn1SequenceOf<Reg_MapData> {
		SequenceOfRegional() {
			super(Reg_MapData.class, 1L, 4L);
		}
	}

	public SequenceOfRegional getRegional() {
		return regional;
	}

	public void setRegional(SequenceOfRegional regional) {
		this.regional = regional;
	}

	MapData() {
		super(true);
	}
}