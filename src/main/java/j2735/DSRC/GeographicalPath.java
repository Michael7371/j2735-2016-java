package j2735.DSRC;

import asn2pojo.runtime.types.Asn1Sequence;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import asn2pojo.runtime.annotations.Asn1Property;
import asn2pojo.runtime.types.Asn1Boolean;
import asn2pojo.runtime.types.Asn1Choice;
import java.util.List;
import java.util.Optional;
import asn2pojo.runtime.types.Asn1Type;
import j2735.REGION.Reg_GeographicalPath;
import asn2pojo.runtime.types.Asn1SequenceOf;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * 
 * <p>
 * This source code was generated by a tool. Manual edits are futile.
 * </p>
 * <p>
 * asn1jvm v1.0-SNAPSHOT
 * </p>
 * <p>
 * ASN.1 source files:
 * </p>
 * 
 * <pre>
 * J2735_201603DA.ASN
 * </pre>
 * 
 */
@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class GeographicalPath extends Asn1Sequence {

	@Asn1Property(tag = 0, optional = true)
	private DescriptiveName name;
	@Asn1Property(tag = 1, optional = true)
	private RoadSegmentReferenceID id;
	@Asn1Property(tag = 2, optional = true)
	private Position3D anchor;
	@Asn1Property(tag = 3, optional = true)
	@JsonDeserialize(using = LaneWidth.LaneWidthDeserializer.class)
	private LaneWidth laneWidth;
	@Asn1Property(tag = 4, optional = true)
	private DirectionOfUse directionality;
	@Asn1Property(tag = 5, optional = true)
	private Asn1Boolean closedPath;
	@Asn1Property(tag = 6, optional = true)
	private HeadingSlice direction;
	@Asn1Property(tag = 7, optional = true)
	private DescriptionChoice description;
	@Asn1Property(tag = 8, optional = true)
	private SequenceOfRegional regional;

	public DescriptiveName getName() {
		return name;
	}

	public void setName(DescriptiveName name) {
		this.name = name;
	}

	public RoadSegmentReferenceID getId() {
		return id;
	}

	public void setId(RoadSegmentReferenceID id) {
		this.id = id;
	}

	public Position3D getAnchor() {
		return anchor;
	}

	public void setAnchor(Position3D anchor) {
		this.anchor = anchor;
	}

	public LaneWidth getLaneWidth() {
		return laneWidth;
	}

	public void setLaneWidth(LaneWidth laneWidth) {
		this.laneWidth = laneWidth;
	}

	public DirectionOfUse getDirectionality() {
		return directionality;
	}

	public void setDirectionality(DirectionOfUse directionality) {
		this.directionality = directionality;
	}

	public Asn1Boolean getClosedPath() {
		return closedPath;
	}

	public void setClosedPath(Asn1Boolean closedPath) {
		this.closedPath = closedPath;
	}

	public HeadingSlice getDirection() {
		return direction;
	}

	public void setDirection(HeadingSlice direction) {
		this.direction = direction;
	}

	@JsonInclude(Include.NON_NULL)
	public static class DescriptionChoice extends Asn1Choice {
		@Asn1Property(tag = 0)
		private OffsetSystem path;
		@Asn1Property(tag = 1)
		private GeometricProjection geometry;
		@Asn1Property(tag = 2)
		private ValidRegion oldRegion;

		DescriptionChoice() {
			super(true);
		}

		public OffsetSystem getPath() {
			return path;
		}

		public void setPath(OffsetSystem path) {
			this.path = path;
		}

		public GeometricProjection getGeometry() {
			return geometry;
		}

		public void setGeometry(GeometricProjection geometry) {
			this.geometry = geometry;
		}

		public ValidRegion getOldRegion() {
			return oldRegion;
		}

		public void setOldRegion(ValidRegion oldRegion) {
			this.oldRegion = oldRegion;
		}

		@Override
		protected List<Optional<Asn1Type>> listTypes() {
			return null;
		}
	}

	public DescriptionChoice getDescription() {
		return description;
	}

	public void setDescription(DescriptionChoice description) {
		this.description = description;
	}

	@JsonInclude(Include.NON_NULL)
	public static class SequenceOfRegional extends Asn1SequenceOf<Reg_GeographicalPath> {
		SequenceOfRegional() {
			super(j2735.REGION.Reg_GeographicalPath.class, 1L, 4L);
		}
	}

	public SequenceOfRegional getRegional() {
		return regional;
	}

	public void setRegional(SequenceOfRegional regional) {
		this.regional = regional;
	}

	GeographicalPath() {
		super(true);
	}
}