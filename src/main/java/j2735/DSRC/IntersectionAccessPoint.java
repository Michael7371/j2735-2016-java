package j2735.DSRC;

import asn2pojo.runtime.types.Asn1Choice;
import asn2pojo.runtime.annotations.Asn1Property;
import java.util.Optional;
import java.util.List;
import asn2pojo.runtime.types.Asn1Type;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * 
 * <p>
 * This source code was generated by a tool. Manual edits are futile.
 * </p>
 * <p>
 * asn1jvm v1.0-SNAPSHOT
 * </p>
 * <p>
 * ASN.1 source files:
 * </p>
 * 
 * <pre>
 * J2735_201603DA.ASN
 * </pre>
 * 
 */
@JsonInclude(Include.NON_NULL)
public class IntersectionAccessPoint extends Asn1Choice {

	@Asn1Property(tag = 0)
	@JsonDeserialize(using = LaneID.LaneIDDeserializer.class)
	private LaneID lane;
	@Asn1Property(tag = 1)
	@JsonDeserialize(using = ApproachID.ApproachIDDeserializer.class)
	private ApproachID approach;
	@Asn1Property(tag = 2)
	@JsonDeserialize(using = LaneConnectionID.LaneConnectionIDDeserializer.class)
	private LaneConnectionID connection;

	IntersectionAccessPoint() {
		super(true);
	}

	public LaneID getLane() {
		return lane;
	}

	public void setLane(LaneID lane) {
		this.lane = lane;
	}

	public ApproachID getApproach() {
		return approach;
	}

	public void setApproach(ApproachID approach) {
		this.approach = approach;
	}

	public LaneConnectionID getConnection() {
		return connection;
	}

	public void setConnection(LaneConnectionID connection) {
		this.connection = connection;
	}

	@Override
	protected List<Optional<Asn1Type>> listTypes() {
		return null;
	}
}