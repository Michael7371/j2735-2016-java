package j2735.DSRC;

import asn2pojo.runtime.types.Asn1Bitstring;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * 
 * <p>
 * This source code was generated by a tool. Manual edits are futile.
 * </p>
 * <p>
 * asn1jvm v1.0-SNAPSHOT
 * </p>
 * <p>
 * ASN.1 source files:
 * </p>
 * 
 * <pre>
 * J2735_201603DA.ASN
 * </pre>
 * 
 */
@JsonDeserialize(using = LaneAttributes_StripingDeserializer.class)
public class LaneAttributes_Striping extends Asn1Bitstring {

	public boolean isStripeToConnectingLanesRevocableLane() {
		return get(0);
	}

	public void setStripeToConnectingLanesRevocableLane(boolean stripeToConnectingLanesRevocableLane) {
		set(0, stripeToConnectingLanesRevocableLane);
	}

	public boolean isStripeDrawOnLeft() {
		return get(1);
	}

	public void setStripeDrawOnLeft(boolean stripeDrawOnLeft) {
		set(1, stripeDrawOnLeft);
	}

	public boolean isStripeDrawOnRight() {
		return get(2);
	}

	public void setStripeDrawOnRight(boolean stripeDrawOnRight) {
		set(2, stripeDrawOnRight);
	}

	public boolean isStripeToConnectingLanesLeft() {
		return get(3);
	}

	public void setStripeToConnectingLanesLeft(boolean stripeToConnectingLanesLeft) {
		set(3, stripeToConnectingLanesLeft);
	}

	public boolean isStripeToConnectingLanesRight() {
		return get(4);
	}

	public void setStripeToConnectingLanesRight(boolean stripeToConnectingLanesRight) {
		set(4, stripeToConnectingLanesRight);
	}

	public boolean isStripeToConnectingLanesAhead() {
		return get(5);
	}

	public void setStripeToConnectingLanesAhead(boolean stripeToConnectingLanesAhead) {
		set(5, stripeToConnectingLanesAhead);
	}

	public LaneAttributes_Striping() {
		super(16, false, new String[]{"stripeToConnectingLanesRevocableLane", "stripeDrawOnLeft", "stripeDrawOnRight",
				"stripeToConnectingLanesLeft", "stripeToConnectingLanesRight", "stripeToConnectingLanesAhead"});
	}
}