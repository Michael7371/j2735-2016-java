package j2735.DSRC;

import asn2pojo.runtime.types.Asn1Sequence;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.Setter;
import asn2pojo.runtime.annotations.Asn1Property;
import asn2pojo.runtime.types.Asn1Choice;
import java.util.List;
import java.util.Optional;
import asn2pojo.runtime.types.Asn1Type;
import j2735.REGION.Reg_ComputedLane;
import asn2pojo.runtime.types.Asn1SequenceOf;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * 
 *******************************************************************************
 *
 * This source file was generated by a tool. Beware manual edits might be
 * overwritten in future releases. asn1jvm v1.0-SNAPSHOT
 *
 *******************************************************************************
 * Copyright 2024 USDOT
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************
 * 
 */
@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@Getter
@Setter
public class ComputedLane extends Asn1Sequence {

	@Asn1Property(tag = 0)
	@JsonDeserialize(using = LaneID.LaneIDDeserializer.class)
	private LaneID referenceLaneId;
	@Asn1Property(tag = 1)
	private OffsetXaxisChoice offsetXaxis;
	@Asn1Property(tag = 2)
	private OffsetYaxisChoice offsetYaxis;
	@Asn1Property(tag = 3, optional = true)
	@JsonDeserialize(using = Angle.AngleDeserializer.class)
	private Angle rotateXY;
	@Asn1Property(tag = 4, optional = true)
	@JsonDeserialize(using = Scale_B12.Scale_B12Deserializer.class)
	private Scale_B12 scaleXaxis;
	@Asn1Property(tag = 5, optional = true)
	@JsonDeserialize(using = Scale_B12.Scale_B12Deserializer.class)
	private Scale_B12 scaleYaxis;
	@Asn1Property(tag = 6, optional = true)
	private SequenceOfRegional regional;

	@Getter
	@Setter
	@JsonInclude(Include.NON_NULL)
	public static class OffsetXaxisChoice extends Asn1Choice {
		@Asn1Property(tag = 0)
		@JsonDeserialize(using = DrivenLineOffsetSm.DrivenLineOffsetSmDeserializer.class)
		private DrivenLineOffsetSm small;
		@Asn1Property(tag = 1)
		@JsonDeserialize(using = DrivenLineOffsetLg.DrivenLineOffsetLgDeserializer.class)
		private DrivenLineOffsetLg large;

		OffsetXaxisChoice() {
			super(false);
		}

		@Override
		protected List<Optional<Asn1Type>> listTypes() {
			return null;
		}
	}

	@Getter
	@Setter
	@JsonInclude(Include.NON_NULL)
	public static class OffsetYaxisChoice extends Asn1Choice {
		@Asn1Property(tag = 0)
		@JsonDeserialize(using = DrivenLineOffsetSm.DrivenLineOffsetSmDeserializer.class)
		private DrivenLineOffsetSm small;
		@Asn1Property(tag = 1)
		@JsonDeserialize(using = DrivenLineOffsetLg.DrivenLineOffsetLgDeserializer.class)
		private DrivenLineOffsetLg large;

		OffsetYaxisChoice() {
			super(false);
		}

		@Override
		protected List<Optional<Asn1Type>> listTypes() {
			return null;
		}
	}

	@JsonInclude(Include.NON_NULL)
	public static class SequenceOfRegional extends Asn1SequenceOf<Reg_ComputedLane> {
		SequenceOfRegional() {
			super(j2735.REGION.Reg_ComputedLane.class, 1L, 4L);
		}
	}

	ComputedLane() {
		super(true);
	}
}