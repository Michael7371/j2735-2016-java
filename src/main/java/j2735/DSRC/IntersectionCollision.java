package j2735.DSRC;

import asn2pojo.runtime.types.Asn1Sequence;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import asn2pojo.runtime.annotations.Asn1Property;
import j2735.REGION.Reg_IntersectionCollision;
import asn2pojo.runtime.types.Asn1SequenceOf;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * 
 * <p>
 * This source code was generated by a tool. Manual edits are futile.
 * </p>
 * <p>
 * asn1jvm v1.0-SNAPSHOT
 * </p>
 * <p>
 * ASN.1 source files:
 * </p>
 * 
 * <pre>
 * J2735_201603DA.ASN
 * </pre>
 * 
 */
@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class IntersectionCollision extends Asn1Sequence {

	@Asn1Property(tag = 0)
	@JsonDeserialize(using = MsgCount.MsgCountDeserializer.class)
	private MsgCount msgCnt;
	@Asn1Property(tag = 1)
	private TemporaryID id;
	@Asn1Property(tag = 2, optional = true)
	@JsonDeserialize(using = MinuteOfTheYear.MinuteOfTheYearDeserializer.class)
	private MinuteOfTheYear timeStamp;
	@Asn1Property(tag = 3, optional = true)
	private BSMcoreData partOne;
	@Asn1Property(tag = 4, optional = true)
	private PathHistory path;
	@Asn1Property(tag = 5, optional = true)
	private PathPrediction pathPrediction;
	@Asn1Property(tag = 6)
	private IntersectionReferenceID intersectionID;
	@Asn1Property(tag = 7)
	private ApproachOrLane laneNumber;
	@Asn1Property(tag = 8)
	private VehicleEventFlags eventFlag;
	@Asn1Property(tag = 9, optional = true)
	private SequenceOfRegional regional;

	public MsgCount getMsgCnt() {
		return msgCnt;
	}

	public void setMsgCnt(MsgCount msgCnt) {
		this.msgCnt = msgCnt;
	}

	public TemporaryID getId() {
		return id;
	}

	public void setId(TemporaryID id) {
		this.id = id;
	}

	public MinuteOfTheYear getTimeStamp() {
		return timeStamp;
	}

	public void setTimeStamp(MinuteOfTheYear timeStamp) {
		this.timeStamp = timeStamp;
	}

	public BSMcoreData getPartOne() {
		return partOne;
	}

	public void setPartOne(BSMcoreData partOne) {
		this.partOne = partOne;
	}

	public PathHistory getPath() {
		return path;
	}

	public void setPath(PathHistory path) {
		this.path = path;
	}

	public PathPrediction getPathPrediction() {
		return pathPrediction;
	}

	public void setPathPrediction(PathPrediction pathPrediction) {
		this.pathPrediction = pathPrediction;
	}

	public IntersectionReferenceID getIntersectionID() {
		return intersectionID;
	}

	public void setIntersectionID(IntersectionReferenceID intersectionID) {
		this.intersectionID = intersectionID;
	}

	public ApproachOrLane getLaneNumber() {
		return laneNumber;
	}

	public void setLaneNumber(ApproachOrLane laneNumber) {
		this.laneNumber = laneNumber;
	}

	public VehicleEventFlags getEventFlag() {
		return eventFlag;
	}

	public void setEventFlag(VehicleEventFlags eventFlag) {
		this.eventFlag = eventFlag;
	}

	@JsonInclude(Include.NON_NULL)
	public static class SequenceOfRegional extends Asn1SequenceOf<Reg_IntersectionCollision> {
		SequenceOfRegional() {
			super(j2735.REGION.Reg_IntersectionCollision.class, 1L, 4L);
		}
	}

	public SequenceOfRegional getRegional() {
		return regional;
	}

	public void setRegional(SequenceOfRegional regional) {
		this.regional = regional;
	}

	IntersectionCollision() {
		super(true);
	}
}